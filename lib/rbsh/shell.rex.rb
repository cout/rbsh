#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "shell.rex".
#++

require 'racc/parser'
class ShellParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\$\(\(/))
           @rex_tokens.push action { @states.push(state); state = :ARITH; [ :ArithmeticStart ] }

        when (text = ss.scan(/\$\{/))
           @rex_tokens.push action { @states.push(state); state = :PARAM; [ :ParamStart ] }

        when (text = ss.scan(/\s+/))
          ;

        when (text = ss.scan(/\#.*\n/))
          ;

        when (text = ss.scan(/[A-Za-z0-9:]([A-Za-z_0-9]|:)*=[A-Za-z0-9:]([A-Za-z_0-9]|:)*/))
           @rex_tokens.push action { [:ASSIGNMENT_WORD, text] }

        when (text = ss.scan(/[A-Za-z0-9:]([A-Za-z_0-9]|:)*/))
           @rex_tokens.push action { [:WORD, text] }

        when (text = ss.scan(/".*"/))
           @rex_tokens.push action { [:WORD, text[1..-2]] } # TODO: string

        when (text = ss.scan(/'.*'/))
           @rex_tokens.push action { [:WORD, text[1..-2]] } # TODO: string

        when (text = ss.scan(/xxxxxxxxx/))
           @rex_tokens.push action { [:NAME, text] }

        when (text = ss.scan(/\n/))
           @rex_tokens.push action { [:NEWLINE] }

        when (text = ss.scan(/xxxxxxxxx/))
           @rex_tokens.push action { [:IO_NUMBER, text.to_i] }

        when (text = ss.scan(/\&\&/))
           @rex_tokens.push action { [:AND_IF] }

        when (text = ss.scan(/\|\|/))
           @rex_tokens.push action { [:OR_IF] }

        when (text = ss.scan(/\;\;/))
           @rex_tokens.push action { [:DSEMI] }

        when (text = ss.scan(/\<\</))
           @rex_tokens.push action { [:DLESS] }

        when (text = ss.scan(/\>\>/))
           @rex_tokens.push action { [:DGREAT] }

        when (text = ss.scan(/\<\&/))
           @rex_tokens.push action { [:LESSAND] }

        when (text = ss.scan(/\>\&/))
           @rex_tokens.push action { [:GREATAND] }

        when (text = ss.scan(/\<\>/))
           @rex_tokens.push action { [:LESSGREAT] }

        when (text = ss.scan(/\<\<\-/))
           @rex_tokens.push action { [:DLESSDASH] }

        when (text = ss.scan(/\>\|/))
           @rex_tokens.push action { [:CLOBBER] }

        when (text = ss.scan(/if/))
           @rex_tokens.push action { [:If] }

        when (text = ss.scan(/then/))
           @rex_tokens.push action { [:Then] }

        when (text = ss.scan(/else/))
           @rex_tokens.push action { [:Else] }

        when (text = ss.scan(/elif/))
           @rex_tokens.push action { [:Elif] }

        when (text = ss.scan(/fi/))
           @rex_tokens.push action { [:Fi] }

        when (text = ss.scan(/do/))
           @rex_tokens.push action { [:Do] }

        when (text = ss.scan(/done/))
           @rex_tokens.push action { [:Done] }

        when (text = ss.scan(/case/))
           @rex_tokens.push action { [:Case] }

        when (text = ss.scan(/esac/))
           @rex_tokens.push action { [:Esac] }

        when (text = ss.scan(/while/))
           @rex_tokens.push action { [:While] }

        when (text = ss.scan(/until/))
           @rex_tokens.push action { [:Until] }

        when (text = ss.scan(/for/))
           @rex_tokens.push action { [:For] }

        when (text = ss.scan(/\{/))
           @rex_tokens.push action { [:Lbrace] }

        when (text = ss.scan(/\}/))
           @rex_tokens.push action { [:Rbrace] }

        when (text = ss.scan(/!/))
           @rex_tokens.push action { [:Bang] }

        when (text = ss.scan(/in/))
           @rex_tokens.push action { [:In] }

        when (text = ss.scan(/\(/))
           @rex_tokens.push action { [ :LPAREN ] }

        when (text = ss.scan(/\)/))
           @rex_tokens.push action { [ :RPAREN ] }

        when (text = ss.scan(/\$\$/))
           @rex_tokens.push action { [ :DOLLARDOLLAR ] }

        when (text = ss.scan(/\$/))
           @rex_tokens.push action { [ :DOLLAR ] }

        when (text = ss.scan(/\&/))
           @rex_tokens.push action { [ :AMPERSAND ] }

        when (text = ss.scan(/;/))
           @rex_tokens.push action { [ :SEMICOLON ] }

        when (text = ss.scan(/</))
           @rex_tokens.push action { [ :LESS ] }

        when (text = ss.scan(/>/))
           @rex_tokens.push action { [ :GREAT ] }

        when (text = ss.scan(/\|/))
           @rex_tokens.push action { [ :PIPE ] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      when :ARITH
        case
        when (text = ss.scan(/\)\)/))
           @rex_tokens.push action { state = @states.pop(); [ :ArithmeticEnd ] }

        when (text = ss.scan(/~/))
           @rex_tokens.push action { [ :ARITHTILDE ] }

        when (text = ss.scan(/!/))
           @rex_tokens.push action { [ :ARITHBANG ] }

        when (text = ss.scan(/\*/))
           @rex_tokens.push action { [ :ARITHTIMES ] }

        when (text = ss.scan(/\//))
           @rex_tokens.push action { [ :ARITHDIV ] }

        when (text = ss.scan(/%/))
           @rex_tokens.push action { [ :ARITHMOD ] }

        when (text = ss.scan(/\+/))
           @rex_tokens.push action { [ :ARITHPLUS ] }

        when (text = ss.scan(/-/))
           @rex_tokens.push action { [ :ARITHMINUS ] }

        when (text = ss.scan(/<</))
           @rex_tokens.push action { [ :ARITHLSHIFT ] }

        when (text = ss.scan(/>>/))
           @rex_tokens.push action { [ :ARITHRSHIFT ] }

        when (text = ss.scan(/</))
           @rex_tokens.push action { [ :ARITHLT ] }

        when (text = ss.scan(/<=/))
           @rex_tokens.push action { [ :ARITHLE ] }

        when (text = ss.scan(/>/))
           @rex_tokens.push action { [ :ARITHGT ] }

        when (text = ss.scan(/>=/))
           @rex_tokens.push action { [ :ARITHGE ] }

        when (text = ss.scan(/==/))
           @rex_tokens.push action { [ :ARITHEQ ] }

        when (text = ss.scan(/!=/))
           @rex_tokens.push action { [ :ARITHNE ] }

        when (text = ss.scan(/&/))
           @rex_tokens.push action { [ :ARITHBITAND ] }

        when (text = ss.scan(/^/))
           @rex_tokens.push action { [ :ARITHBITXOR ] }

        when (text = ss.scan(/\|/))
           @rex_tokens.push action { [ :ARITHBITOR ] }

        when (text = ss.scan(/&&/))
           @rex_tokens.push action { [ :ARITHLOGAND ] }

        when (text = ss.scan(/\|\|/))
           @rex_tokens.push action { [ :ARITHLOGOR ] }

        when (text = ss.scan(/\?/))
           @rex_tokens.push action { [ :ARITHQUESTION ] }

        when (text = ss.scan(/:/))
           @rex_tokens.push action { [ :ARITHCOLON ] }

        when (text = ss.scan(/=/))
           @rex_tokens.push action { [ :ARITHASSIGN ] }

        when (text = ss.scan(/\*=/))
           @rex_tokens.push action { [ :ARITHASSIGNTIMES ] }

        when (text = ss.scan(/\/=/))
           @rex_tokens.push action { [ :ARITHASSIGNDIV ] }

        when (text = ss.scan(/%=/))
           @rex_tokens.push action { [ :ARITHASSIGNMOD ] }

        when (text = ss.scan(/\+=/))
           @rex_tokens.push action { [ :ARITHASSIGNPLUS ] }

        when (text = ss.scan(/-=/))
           @rex_tokens.push action { [ :ARITHASSIGNMINUS ] }

        when (text = ss.scan(/<<=/))
           @rex_tokens.push action { [ :ARITHASSIGNLSHIFT ] }

        when (text = ss.scan(/>>=/))
           @rex_tokens.push action { [ :ARITHASSIGNRSHIFT ] }

        when (text = ss.scan(/&=/))
           @rex_tokens.push action { [ :ARITHASSIGNBITAND ] }

        when (text = ss.scan(/^=/))
           @rex_tokens.push action { [ :ARITHASSIGNBITXOR ] }

        when (text = ss.scan(/'|='/))
           @rex_tokens.push action { [ :ARITHASSIGNBITOR ] }

        when (text = ss.scan(/[0-9]*/))
           @rex_tokens.push action { [ :ARITHINT, text.to_i ] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      when :PARAM
        case
        when (text = ss.scan(/\}/))
           @rex_tokens.push action { state = @states.pop(); [ :ParamEnd ] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

  def scan_setup
    @states = [ ]
  end
end # class
